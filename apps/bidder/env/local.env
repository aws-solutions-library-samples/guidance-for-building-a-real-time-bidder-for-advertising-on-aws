# General
# Go runtime GOMAXPROCS variable. Leave empty to use as many threads as there are CPUs in the system.
GOMAXPROCS=

# Logging level enabled. Possible values are:
# trace
# debug
# info
# warn
# error
# fatal
# panic
LOG_LEVEL=debug

# HTTP Server
SERVER_ADDRESS=:8090
SERVER_BIDREQUEST_PATH=/bidrequest
SERVER_HEALTHCHECK_PATH=/healthz

# Timeouts for <https://godoc.org/github.com/valyala/fasthttp#Server>. Idle timeout is for keep-alive connections when
# no request is handled: an ad exchange recommends a timeout of 60-120s
# (<https://developers.mopub.com/dsps/integration/network-infrastructure/>) so we use such a value.
SERVER_READ_TIMEOUT=100ms
SERVER_WRITE_TIMEOUT=100ms
SERVER_IDLE_TIMEOUT=1s

# Log errors like "connection reset by peer", "broken pipe" and "connection timeout".
SERVER_LOG_ALL_FASTHTTP_ERRORS=true

BIDREQUEST_TIMEOUT=100ms
# Status returned by bidder in case of bidrequest timeout.
BIDREQUEST_TIMEOUT_STATUS=504

# Internal HTTP Server
DIAGNOSTIC_SERVER_ADDRESS=:8091
DIAGNOSTIC_SERVER_METRICS_PATH=/metrics
DIAGNOSTIC_SERVER_PROFILER_PATH=/debug/pprof
DIAGNOSTIC_SERVER_TRACE_PATH=/debug/trace
DIAGNOSTIC_SERVER_SHUTDOWN_TIMEOUT=2s

# AWS; use "test" for localstack, or real credentials for AWS.
AWS_ACCESS_KEY_ID=test
AWS_SECRET_ACCESS_KEY=test
AWS_REGION=us-east-1

# Kinesis
# Endpoint must be set for localstack, otherwise empty.
KINESIS_ENDPOINT=http://0.0.0.0:4566
# Stream name or empty to disable Kinesis use.
KINESIS_STREAM_NAME=bidder-bids
# Maximum time the bidder can wait for the Kinesis stream to exist before failing and exiting.
KINESIS_OPERATION_TIMEOUT=30s
# Set to true to disable Kinesis writes for benchmarking purposes.
KINESIS_DISABLE=false
# Disable logging.
KINESIS_LOG_LEVEL=0
# Maximum number of connections to Kinesis backend.
KINESIS_MAX_CONNECTIONS=64
# Time between periodic buffer flushes.
KINESIS_FLUSH_INTERVAL=5s

# Sets which database implementation should be used. "dynamodb" and "aerospike" are current possible values.
DATABASE_CLIENT="dynamodb"

# DynamoDB
# Endpoint must be set for localstack, otherwise empty.
DYNAMODB_ENDPOINT=http://0.0.0.0:4566
# Maximum time the bidder can wait for DynamoDB tables to exist before failing and exiting.
DYNAMODB_OPERATION_TIMEOUT=50s
# Number of parallel scan workers used to speed up table scans at app startup.
# 32 workers is enough to saturate 100Mbps connection.
DYNAMODB_SCAN_WORKERS=1
# Enable/disable SSL.
DYNAMODB_DISABLE_SSL=false
# Disable logging.
DYNAMODB_LOG_LEVEL=0
# Enable/disable client-side validation of DynamoDB request parameters.
DYNAMODB_DISABLE_PARAM_VALIDATION=false
# Enable/disable computing CRC32 checksums of DynamoDB requests/responses.
DYNAMODB_DISABLE_COMPUTE_CHECKSUMS=false
# Override number of retries in DynamoDB queries during bid request handling; -1 keeps the SDK default.
DYNAMODB_MAX_RETRIES=-1
# Override number of retries in DynamoDB queries during bidder initialization; -1 keeps the SDK default.
DYNAMODB_SCAN_MAX_RETRIES=10
# Override maximum number of idle connections per host for HTTP keep-alive.
DYNAMODB_MAX_IDLE_CONNS_PER_HOST=2
# Log DynamoDB requests taking at least the specified time.
DYNAMODB_SLOW_LOG_DURATION=1h
# Use DynamoDB low level API instead of AWS SDK calls.
DYNAMODB_ENABLE_LOW_LEVEL=false
# Name of the DynamoDB table mapping devices to audiences.
DYNAMODB_DEVICE_TABLE=dev
# Name of the DynamoDB table mapping audiences to campaigns.
DYNAMODB_AUDIENCE_TABLE=audience_campaigns
# Name of the DynamoDB table providing campaign details and total budget.
DYNAMODB_CAMPAIGN_TABLE=campaign_budget
# Name of the DynamoDB table containing compressed campaign budgets.
DYNAMODB_BUDGET_TABLE=budget

# Maximum number of connections low-level query may establish to dynamoDB host.
DYNAMODB_LOW_LEVEL_MAX_CONNECTIONS=512

# Disable DAX. (There is no DAX in localstack, so only production can use it.)
DAX_ENABLE=false
# DAX endpoint (also known as ClusterDiscoveryEndpoint): empty disables DAX usage.
DAX_ENDPOINT=
# DAX request timeout: use a lower value than the default 2 minutes; all requests should occur while handling a bid
# request.
DAX_REQUEST_TIMEOUT=100ms
# DAX read retries: keep the default of 2 retries, not including the initial request attempt.
DAX_READ_RETRIES=2
# Disable logging.
DAX_LOG_LEVEL=0

# Aerospike
# Host of the Aerospike cluster.
AEROSPIKE_HOST=localhost
# Port of the Aerospike cluster.
AEROSPIKE_PORT=3000
# Namespace to use by bidder.
AEROSPIKE_NAMESPACE="test"
# Allows to fill the connection pool with connections for all nodes.
AEROSPIKE_WARM_UP_COUNT=0
# Specifies transaction total timeout for all scans. 0 for no timeout.
AEROSPIKE_SCAN_TOTAL_TIMEOUT=0
# Determines the maximum number of retries before aborting the current transaction.
AEROSPIKE_SCAN_MAX_RETRIES=2
# Priority of request relative to other transactions. 1 = low, 2 = medium, 3 = high. 1 is default.
AEROSPIKE_SCAN_PRIORITY=1
# ConcurrentNodes determines how to issue scan requests (in parallel or sequentially).
AEROSPIKE_SCAN_CONCURRENT_NODES=true
# Determines the duration to sleep between scan retries. If set to 0, there is no sleep.
AEROSPIKE_SCAN_SLEEP_BETWEEN_RETRIES=1s
# Specifies the multiplying factor to be used for exponential backoff during retries.
# Default value 1.5, must always by > 1
AEROSPIKE_SCAN_SLEEP_MULTIPLIER=1.5
# Specifies transaction total timeout for all get's. 0 for no timeout.
AEROSPIKE_GET_TOTAL_TIMEOUT=0
# Determines the maximum number of retries before aborting the current transaction.
AEROSPIKE_GET_MAX_RETRIES=2
# Priority of request relative to other transactions. 1 = low, 2 = medium, 3 = high. 3 is default.
AEROSPIKE_GET_PRIORITY=3
# Logging option for aerospike client(https://www.aerospike.com/docs/client/go/usage/logging.html)
AEROSPIKE_CLIENT_LOG_LEVEL="OFF"
# Boolean flag whether use scan or get operation to retrive budgets
AEROSPIKE_DISABLE_SCAN=false
# Determine the timeout for fetching the budget keys
AEROSPIKE_BUDGET_GET_TIMEOUT=20s

# Cache
# Period of budget cache sync, in seconds. If set to 0, sync is disabled.
# This setting is restricted to seconds due to API of cron package used.
# See https://github.com/go-co-op/gocron/issues/44 for github issue.
BUDGET_SYNC_PERIOD_SECONDS=20s
# Disable periodic budget sync. If set to false, the budget will be synced only once, at app startup.
BUDGET_SYNC_DISABLE=false
# Disable device database query and use randomly generated data instead. Used for benchmarking.
DEVICE_QUERY_DISABLE=true
# Simulate device query delay when DEVICE_QUERY_DISABLE=true. Used for benchmarking.
MOCK_DEVICE_QUERY_DELAY=0
# Simulate device query with unknown device ID. A float value in range [0;1].
MOCK_DEVICE_NO_BID_FRACTION=0

# Host where blackbox tests can find the bidder.
TEST_BIDDER_HOST=http://localhost
